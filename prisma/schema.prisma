generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id String @id @default(nanoid(16))
  googleID String? @unique
  username String @unique
  dateOfBirth String?
  name String?
  email String @unique
  phoneNumber String?
  password String? 
  description String?
  displayName String?
  profilePic String?
  refreshToken String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  isVerified Boolean? @default(false)
  isBlocked Boolean? @default(false)
  resetPasswordToken String?
  resetPasswordTokenExpiresAt DateTime?
  verificationToken String?
  verificationTokenExpiresAt DateTime?
  lastLogin DateTime @updatedAt
  friends Friends[]
  notifications Notifications[]
  messages Message[]
  histories History[]
  role Roles @default(USER)
  accountSettings AccountSettings[]

  @@map("users")
  @@index([createdAt])
}

enum Roles {
  USER
  ADMIN
}

model Friends {
  id String @id @default(nanoid(16))
  name String?
  preferredName String?
  dateOfBirth String?
  phoneNumber String?
  profilePic String?
  email String?
  relationship String?
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  isDeleted Boolean? @default(false)

  user User @relation(fields: [userId], references: [id])
  userId String
  histories History[]

  @@index([createdAt])
  @@map("friends")
}



model AccountSettings {
  id String @id @default(nanoid(16))
  userId String @unique
  user User @relation(fields: [userId], references: [id])

  birthdayNotificationTime Int?
  timeToSendBirthdayMessages Int? 
  defaultMessageChannel MessageChannel? @default(WHATSAPP)
  useNickNameInMessage Boolean? @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("account_settings")
}

enum MessageChannel {
  WHATSAPP
  EMAIL
  TEXTMESSAGE
}

model Notifications {
  id String @id @default(nanoid(16))
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  tag String?
  title String
  message String
  isDeleted Boolean? @default(false)
  isRead Boolean? @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
  @@index([createdAt])
}

model Message {
  id String @id @default(nanoid(16))
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  status MessageStatus? @default(DRAFT)
  message String?
  tag MessageTag?
  isDeleted Boolean? @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  historyId String?
  history History? @relation(fields: [historyId], references: [id])

  @@map("messages")
  @@index([createdAt])
}

enum MessageStatus {
  SENT
  DRAFT
  DELETED
}

enum MessageTag {
  HUMAN
  AI
}

model History {
  id String @id @default(nanoid(16))
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  friendId String
  friend Friends @relation(fields: [friendId], references: [id], onDelete: Cascade)

  timeSent DateTime?
  status MessageStatus @default(DRAFT)
  channel MessageChannel @default(WHATSAPP)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  messages Message[]

  @@map("history")
  @@index([createdAt])
}

